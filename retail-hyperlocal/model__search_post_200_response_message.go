/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchPost200ResponseMessage struct for SearchPost200ResponseMessage
type SearchPost200ResponseMessage struct {
	Ack Ack `json:"ack"`
}

// NewSearchPost200ResponseMessage instantiates a new SearchPost200ResponseMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPost200ResponseMessage(ack Ack) *SearchPost200ResponseMessage {
	this := SearchPost200ResponseMessage{}
	this.Ack = ack
	return &this
}

// NewSearchPost200ResponseMessageWithDefaults instantiates a new SearchPost200ResponseMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPost200ResponseMessageWithDefaults() *SearchPost200ResponseMessage {
	this := SearchPost200ResponseMessage{}
	return &this
}

// GetAck returns the Ack field value
func (o *SearchPost200ResponseMessage) GetAck() Ack {
	if o == nil {
		var ret Ack
		return ret
	}

	return o.Ack
}

// GetAckOk returns a tuple with the Ack field value
// and a boolean to check if the value has been set.
func (o *SearchPost200ResponseMessage) GetAckOk() (*Ack, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ack, true
}

// SetAck sets field value
func (o *SearchPost200ResponseMessage) SetAck(v Ack) {
	o.Ack = v
}

func (o SearchPost200ResponseMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ack"] = o.Ack
	}
	return json.Marshal(toSerialize)
}

type NullableSearchPost200ResponseMessage struct {
	value *SearchPost200ResponseMessage
	isSet bool
}

func (v NullableSearchPost200ResponseMessage) Get() *SearchPost200ResponseMessage {
	return v.value
}

func (v *NullableSearchPost200ResponseMessage) Set(val *SearchPost200ResponseMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPost200ResponseMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPost200ResponseMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPost200ResponseMessage(val *SearchPost200ResponseMessage) *NullableSearchPost200ResponseMessage {
	return &NullableSearchPost200ResponseMessage{value: val, isSet: true}
}

func (v NullableSearchPost200ResponseMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPost200ResponseMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


