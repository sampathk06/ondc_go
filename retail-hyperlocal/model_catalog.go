/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Catalog Describes a Seller App catalog
type Catalog struct {
	BppDescriptor Descriptor `json:"bpp/descriptor"`
	BppCategories []Category `json:"bpp/categories,omitempty"`
	BppFulfillments []Fulfillment `json:"bpp/fulfillments,omitempty"`
	BppPayments []Payment `json:"bpp/payments,omitempty"`
	BppOffers []Offer `json:"bpp/offers,omitempty"`
	BppProviders []Provider `json:"bpp/providers"`
	// Time after which catalog has to be refreshed
	Exp *time.Time `json:"exp,omitempty"`
}

// NewCatalog instantiates a new Catalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalog(bppDescriptor Descriptor, bppProviders []Provider) *Catalog {
	this := Catalog{}
	this.BppDescriptor = bppDescriptor
	this.BppProviders = bppProviders
	return &this
}

// NewCatalogWithDefaults instantiates a new Catalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogWithDefaults() *Catalog {
	this := Catalog{}
	return &this
}

// GetBppDescriptor returns the BppDescriptor field value
func (o *Catalog) GetBppDescriptor() Descriptor {
	if o == nil {
		var ret Descriptor
		return ret
	}

	return o.BppDescriptor
}

// GetBppDescriptorOk returns a tuple with the BppDescriptor field value
// and a boolean to check if the value has been set.
func (o *Catalog) GetBppDescriptorOk() (*Descriptor, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BppDescriptor, true
}

// SetBppDescriptor sets field value
func (o *Catalog) SetBppDescriptor(v Descriptor) {
	o.BppDescriptor = v
}

// GetBppCategories returns the BppCategories field value if set, zero value otherwise.
func (o *Catalog) GetBppCategories() []Category {
	if o == nil || isNil(o.BppCategories) {
		var ret []Category
		return ret
	}
	return o.BppCategories
}

// GetBppCategoriesOk returns a tuple with the BppCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetBppCategoriesOk() ([]Category, bool) {
	if o == nil || isNil(o.BppCategories) {
    return nil, false
	}
	return o.BppCategories, true
}

// HasBppCategories returns a boolean if a field has been set.
func (o *Catalog) HasBppCategories() bool {
	if o != nil && !isNil(o.BppCategories) {
		return true
	}

	return false
}

// SetBppCategories gets a reference to the given []Category and assigns it to the BppCategories field.
func (o *Catalog) SetBppCategories(v []Category) {
	o.BppCategories = v
}

// GetBppFulfillments returns the BppFulfillments field value if set, zero value otherwise.
func (o *Catalog) GetBppFulfillments() []Fulfillment {
	if o == nil || isNil(o.BppFulfillments) {
		var ret []Fulfillment
		return ret
	}
	return o.BppFulfillments
}

// GetBppFulfillmentsOk returns a tuple with the BppFulfillments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetBppFulfillmentsOk() ([]Fulfillment, bool) {
	if o == nil || isNil(o.BppFulfillments) {
    return nil, false
	}
	return o.BppFulfillments, true
}

// HasBppFulfillments returns a boolean if a field has been set.
func (o *Catalog) HasBppFulfillments() bool {
	if o != nil && !isNil(o.BppFulfillments) {
		return true
	}

	return false
}

// SetBppFulfillments gets a reference to the given []Fulfillment and assigns it to the BppFulfillments field.
func (o *Catalog) SetBppFulfillments(v []Fulfillment) {
	o.BppFulfillments = v
}

// GetBppPayments returns the BppPayments field value if set, zero value otherwise.
func (o *Catalog) GetBppPayments() []Payment {
	if o == nil || isNil(o.BppPayments) {
		var ret []Payment
		return ret
	}
	return o.BppPayments
}

// GetBppPaymentsOk returns a tuple with the BppPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetBppPaymentsOk() ([]Payment, bool) {
	if o == nil || isNil(o.BppPayments) {
    return nil, false
	}
	return o.BppPayments, true
}

// HasBppPayments returns a boolean if a field has been set.
func (o *Catalog) HasBppPayments() bool {
	if o != nil && !isNil(o.BppPayments) {
		return true
	}

	return false
}

// SetBppPayments gets a reference to the given []Payment and assigns it to the BppPayments field.
func (o *Catalog) SetBppPayments(v []Payment) {
	o.BppPayments = v
}

// GetBppOffers returns the BppOffers field value if set, zero value otherwise.
func (o *Catalog) GetBppOffers() []Offer {
	if o == nil || isNil(o.BppOffers) {
		var ret []Offer
		return ret
	}
	return o.BppOffers
}

// GetBppOffersOk returns a tuple with the BppOffers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetBppOffersOk() ([]Offer, bool) {
	if o == nil || isNil(o.BppOffers) {
    return nil, false
	}
	return o.BppOffers, true
}

// HasBppOffers returns a boolean if a field has been set.
func (o *Catalog) HasBppOffers() bool {
	if o != nil && !isNil(o.BppOffers) {
		return true
	}

	return false
}

// SetBppOffers gets a reference to the given []Offer and assigns it to the BppOffers field.
func (o *Catalog) SetBppOffers(v []Offer) {
	o.BppOffers = v
}

// GetBppProviders returns the BppProviders field value
func (o *Catalog) GetBppProviders() []Provider {
	if o == nil {
		var ret []Provider
		return ret
	}

	return o.BppProviders
}

// GetBppProvidersOk returns a tuple with the BppProviders field value
// and a boolean to check if the value has been set.
func (o *Catalog) GetBppProvidersOk() ([]Provider, bool) {
	if o == nil {
    return nil, false
	}
	return o.BppProviders, true
}

// SetBppProviders sets field value
func (o *Catalog) SetBppProviders(v []Provider) {
	o.BppProviders = v
}

// GetExp returns the Exp field value if set, zero value otherwise.
func (o *Catalog) GetExp() time.Time {
	if o == nil || isNil(o.Exp) {
		var ret time.Time
		return ret
	}
	return *o.Exp
}

// GetExpOk returns a tuple with the Exp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Catalog) GetExpOk() (*time.Time, bool) {
	if o == nil || isNil(o.Exp) {
    return nil, false
	}
	return o.Exp, true
}

// HasExp returns a boolean if a field has been set.
func (o *Catalog) HasExp() bool {
	if o != nil && !isNil(o.Exp) {
		return true
	}

	return false
}

// SetExp gets a reference to the given time.Time and assigns it to the Exp field.
func (o *Catalog) SetExp(v time.Time) {
	o.Exp = &v
}

func (o Catalog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bpp/descriptor"] = o.BppDescriptor
	}
	if !isNil(o.BppCategories) {
		toSerialize["bpp/categories"] = o.BppCategories
	}
	if !isNil(o.BppFulfillments) {
		toSerialize["bpp/fulfillments"] = o.BppFulfillments
	}
	if !isNil(o.BppPayments) {
		toSerialize["bpp/payments"] = o.BppPayments
	}
	if !isNil(o.BppOffers) {
		toSerialize["bpp/offers"] = o.BppOffers
	}
	if true {
		toSerialize["bpp/providers"] = o.BppProviders
	}
	if !isNil(o.Exp) {
		toSerialize["exp"] = o.Exp
	}
	return json.Marshal(toSerialize)
}

type NullableCatalog struct {
	value *Catalog
	isSet bool
}

func (v NullableCatalog) Get() *Catalog {
	return v.value
}

func (v *NullableCatalog) Set(val *Catalog) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalog(val *Catalog) *NullableCatalog {
	return &NullableCatalog{value: val, isSet: true}
}

func (v NullableCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


