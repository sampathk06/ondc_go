/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Dimensions Describes the dimensions of a real-world object
type Dimensions struct {
	Length *Scalar `json:"length,omitempty"`
	Breadth *Scalar `json:"breadth,omitempty"`
	Height *Scalar `json:"height,omitempty"`
}

// NewDimensions instantiates a new Dimensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensions() *Dimensions {
	this := Dimensions{}
	return &this
}

// NewDimensionsWithDefaults instantiates a new Dimensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionsWithDefaults() *Dimensions {
	this := Dimensions{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *Dimensions) GetLength() Scalar {
	if o == nil || isNil(o.Length) {
		var ret Scalar
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dimensions) GetLengthOk() (*Scalar, bool) {
	if o == nil || isNil(o.Length) {
    return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *Dimensions) HasLength() bool {
	if o != nil && !isNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given Scalar and assigns it to the Length field.
func (o *Dimensions) SetLength(v Scalar) {
	o.Length = &v
}

// GetBreadth returns the Breadth field value if set, zero value otherwise.
func (o *Dimensions) GetBreadth() Scalar {
	if o == nil || isNil(o.Breadth) {
		var ret Scalar
		return ret
	}
	return *o.Breadth
}

// GetBreadthOk returns a tuple with the Breadth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dimensions) GetBreadthOk() (*Scalar, bool) {
	if o == nil || isNil(o.Breadth) {
    return nil, false
	}
	return o.Breadth, true
}

// HasBreadth returns a boolean if a field has been set.
func (o *Dimensions) HasBreadth() bool {
	if o != nil && !isNil(o.Breadth) {
		return true
	}

	return false
}

// SetBreadth gets a reference to the given Scalar and assigns it to the Breadth field.
func (o *Dimensions) SetBreadth(v Scalar) {
	o.Breadth = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *Dimensions) GetHeight() Scalar {
	if o == nil || isNil(o.Height) {
		var ret Scalar
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dimensions) GetHeightOk() (*Scalar, bool) {
	if o == nil || isNil(o.Height) {
    return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *Dimensions) HasHeight() bool {
	if o != nil && !isNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given Scalar and assigns it to the Height field.
func (o *Dimensions) SetHeight(v Scalar) {
	o.Height = &v
}

func (o Dimensions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !isNil(o.Breadth) {
		toSerialize["breadth"] = o.Breadth
	}
	if !isNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	return json.Marshal(toSerialize)
}

type NullableDimensions struct {
	value *Dimensions
	isSet bool
}

func (v NullableDimensions) Get() *Dimensions {
	return v.value
}

func (v *NullableDimensions) Set(val *Dimensions) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensions) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensions(val *Dimensions) *NullableDimensions {
	return &NullableDimensions{value: val, isSet: true}
}

func (v NullableDimensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


