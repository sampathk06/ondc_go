/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Domain Codification of domain for ONDC
type Domain string

// List of Domain
const (
	NIC200452110 Domain = "nic2004:52110"
)

// All allowed values of Domain enum
var AllowedDomainEnumValues = []Domain{
	"nic2004:52110",
}

func (v *Domain) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Domain(value)
	for _, existing := range AllowedDomainEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Domain", value)
}

// NewDomainFromValue returns a pointer to a valid Domain
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainFromValue(v string) (*Domain, error) {
	ev := Domain(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Domain: valid values are %v", v, AllowedDomainEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Domain) IsValid() bool {
	for _, existing := range AllowedDomainEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Domain value
func (v Domain) Ptr() *Domain {
	return &v
}

type NullableDomain struct {
	value *Domain
	isSet bool
}

func (v NullableDomain) Get() *Domain {
	return v.value
}

func (v *NullableDomain) Set(val *Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomain(val *Domain) *NullableDomain {
	return &NullableDomain{value: val, isSet: true}
}

func (v NullableDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

