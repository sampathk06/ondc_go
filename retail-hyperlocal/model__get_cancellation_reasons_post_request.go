/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetCancellationReasonsPostRequest struct for GetCancellationReasonsPostRequest
type GetCancellationReasonsPostRequest struct {
	Context *Context `json:"context,omitempty"`
}

// NewGetCancellationReasonsPostRequest instantiates a new GetCancellationReasonsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCancellationReasonsPostRequest() *GetCancellationReasonsPostRequest {
	this := GetCancellationReasonsPostRequest{}
	return &this
}

// NewGetCancellationReasonsPostRequestWithDefaults instantiates a new GetCancellationReasonsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCancellationReasonsPostRequestWithDefaults() *GetCancellationReasonsPostRequest {
	this := GetCancellationReasonsPostRequest{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *GetCancellationReasonsPostRequest) GetContext() Context {
	if o == nil || isNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCancellationReasonsPostRequest) GetContextOk() (*Context, bool) {
	if o == nil || isNil(o.Context) {
    return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *GetCancellationReasonsPostRequest) HasContext() bool {
	if o != nil && !isNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *GetCancellationReasonsPostRequest) SetContext(v Context) {
	o.Context = &v
}

func (o GetCancellationReasonsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return json.Marshal(toSerialize)
}

type NullableGetCancellationReasonsPostRequest struct {
	value *GetCancellationReasonsPostRequest
	isSet bool
}

func (v NullableGetCancellationReasonsPostRequest) Get() *GetCancellationReasonsPostRequest {
	return v.value
}

func (v *NullableGetCancellationReasonsPostRequest) Set(val *GetCancellationReasonsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCancellationReasonsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCancellationReasonsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCancellationReasonsPostRequest(val *GetCancellationReasonsPostRequest) *NullableGetCancellationReasonsPostRequest {
	return &NullableGetCancellationReasonsPostRequest{value: val, isSet: true}
}

func (v NullableGetCancellationReasonsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCancellationReasonsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


