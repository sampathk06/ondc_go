/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrderOndcOrgLinkedOrdersInner struct for OrderOndcOrgLinkedOrdersInner
type OrderOndcOrgLinkedOrdersInner struct {
	Id *string `json:"id,omitempty"`
}

// NewOrderOndcOrgLinkedOrdersInner instantiates a new OrderOndcOrgLinkedOrdersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderOndcOrgLinkedOrdersInner() *OrderOndcOrgLinkedOrdersInner {
	this := OrderOndcOrgLinkedOrdersInner{}
	return &this
}

// NewOrderOndcOrgLinkedOrdersInnerWithDefaults instantiates a new OrderOndcOrgLinkedOrdersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderOndcOrgLinkedOrdersInnerWithDefaults() *OrderOndcOrgLinkedOrdersInner {
	this := OrderOndcOrgLinkedOrdersInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderOndcOrgLinkedOrdersInner) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOndcOrgLinkedOrdersInner) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderOndcOrgLinkedOrdersInner) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrderOndcOrgLinkedOrdersInner) SetId(v string) {
	o.Id = &v
}

func (o OrderOndcOrgLinkedOrdersInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableOrderOndcOrgLinkedOrdersInner struct {
	value *OrderOndcOrgLinkedOrdersInner
	isSet bool
}

func (v NullableOrderOndcOrgLinkedOrdersInner) Get() *OrderOndcOrgLinkedOrdersInner {
	return v.value
}

func (v *NullableOrderOndcOrgLinkedOrdersInner) Set(val *OrderOndcOrgLinkedOrdersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderOndcOrgLinkedOrdersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderOndcOrgLinkedOrdersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderOndcOrgLinkedOrdersInner(val *OrderOndcOrgLinkedOrdersInner) *NullableOrderOndcOrgLinkedOrdersInner {
	return &NullableOrderOndcOrgLinkedOrdersInner{value: val, isSet: true}
}

func (v NullableOrderOndcOrgLinkedOrdersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderOndcOrgLinkedOrdersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


