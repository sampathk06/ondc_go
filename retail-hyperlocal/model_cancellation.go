/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Cancellation Describes a cancellation event
type Cancellation struct {
	Type *string `json:"type,omitempty"`
	RefId *string `json:"ref_id,omitempty"`
	Policies []Policy `json:"policies,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	CancelledBy *string `json:"cancelled_by,omitempty"`
	Reasons *Option `json:"reasons,omitempty"`
	SelectedReason *CancellationSelectedReason `json:"selected_reason,omitempty"`
	AdditionalDescription *Descriptor `json:"additional_description,omitempty"`
}

// NewCancellation instantiates a new Cancellation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellation() *Cancellation {
	this := Cancellation{}
	return &this
}

// NewCancellationWithDefaults instantiates a new Cancellation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationWithDefaults() *Cancellation {
	this := Cancellation{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Cancellation) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Cancellation) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Cancellation) SetType(v string) {
	o.Type = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Cancellation) GetRefId() string {
	if o == nil || isNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetRefIdOk() (*string, bool) {
	if o == nil || isNil(o.RefId) {
    return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Cancellation) HasRefId() bool {
	if o != nil && !isNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *Cancellation) SetRefId(v string) {
	o.RefId = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *Cancellation) GetPolicies() []Policy {
	if o == nil || isNil(o.Policies) {
		var ret []Policy
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetPoliciesOk() ([]Policy, bool) {
	if o == nil || isNil(o.Policies) {
    return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *Cancellation) HasPolicies() bool {
	if o != nil && !isNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []Policy and assigns it to the Policies field.
func (o *Cancellation) SetPolicies(v []Policy) {
	o.Policies = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Cancellation) GetTime() time.Time {
	if o == nil || isNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.Time) {
    return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Cancellation) HasTime() bool {
	if o != nil && !isNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *Cancellation) SetTime(v time.Time) {
	o.Time = &v
}

// GetCancelledBy returns the CancelledBy field value if set, zero value otherwise.
func (o *Cancellation) GetCancelledBy() string {
	if o == nil || isNil(o.CancelledBy) {
		var ret string
		return ret
	}
	return *o.CancelledBy
}

// GetCancelledByOk returns a tuple with the CancelledBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetCancelledByOk() (*string, bool) {
	if o == nil || isNil(o.CancelledBy) {
    return nil, false
	}
	return o.CancelledBy, true
}

// HasCancelledBy returns a boolean if a field has been set.
func (o *Cancellation) HasCancelledBy() bool {
	if o != nil && !isNil(o.CancelledBy) {
		return true
	}

	return false
}

// SetCancelledBy gets a reference to the given string and assigns it to the CancelledBy field.
func (o *Cancellation) SetCancelledBy(v string) {
	o.CancelledBy = &v
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *Cancellation) GetReasons() Option {
	if o == nil || isNil(o.Reasons) {
		var ret Option
		return ret
	}
	return *o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetReasonsOk() (*Option, bool) {
	if o == nil || isNil(o.Reasons) {
    return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *Cancellation) HasReasons() bool {
	if o != nil && !isNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given Option and assigns it to the Reasons field.
func (o *Cancellation) SetReasons(v Option) {
	o.Reasons = &v
}

// GetSelectedReason returns the SelectedReason field value if set, zero value otherwise.
func (o *Cancellation) GetSelectedReason() CancellationSelectedReason {
	if o == nil || isNil(o.SelectedReason) {
		var ret CancellationSelectedReason
		return ret
	}
	return *o.SelectedReason
}

// GetSelectedReasonOk returns a tuple with the SelectedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetSelectedReasonOk() (*CancellationSelectedReason, bool) {
	if o == nil || isNil(o.SelectedReason) {
    return nil, false
	}
	return o.SelectedReason, true
}

// HasSelectedReason returns a boolean if a field has been set.
func (o *Cancellation) HasSelectedReason() bool {
	if o != nil && !isNil(o.SelectedReason) {
		return true
	}

	return false
}

// SetSelectedReason gets a reference to the given CancellationSelectedReason and assigns it to the SelectedReason field.
func (o *Cancellation) SetSelectedReason(v CancellationSelectedReason) {
	o.SelectedReason = &v
}

// GetAdditionalDescription returns the AdditionalDescription field value if set, zero value otherwise.
func (o *Cancellation) GetAdditionalDescription() Descriptor {
	if o == nil || isNil(o.AdditionalDescription) {
		var ret Descriptor
		return ret
	}
	return *o.AdditionalDescription
}

// GetAdditionalDescriptionOk returns a tuple with the AdditionalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cancellation) GetAdditionalDescriptionOk() (*Descriptor, bool) {
	if o == nil || isNil(o.AdditionalDescription) {
    return nil, false
	}
	return o.AdditionalDescription, true
}

// HasAdditionalDescription returns a boolean if a field has been set.
func (o *Cancellation) HasAdditionalDescription() bool {
	if o != nil && !isNil(o.AdditionalDescription) {
		return true
	}

	return false
}

// SetAdditionalDescription gets a reference to the given Descriptor and assigns it to the AdditionalDescription field.
func (o *Cancellation) SetAdditionalDescription(v Descriptor) {
	o.AdditionalDescription = &v
}

func (o Cancellation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !isNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}
	if !isNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !isNil(o.CancelledBy) {
		toSerialize["cancelled_by"] = o.CancelledBy
	}
	if !isNil(o.Reasons) {
		toSerialize["reasons"] = o.Reasons
	}
	if !isNil(o.SelectedReason) {
		toSerialize["selected_reason"] = o.SelectedReason
	}
	if !isNil(o.AdditionalDescription) {
		toSerialize["additional_description"] = o.AdditionalDescription
	}
	return json.Marshal(toSerialize)
}

type NullableCancellation struct {
	value *Cancellation
	isSet bool
}

func (v NullableCancellation) Get() *Cancellation {
	return v.value
}

func (v *NullableCancellation) Set(val *Cancellation) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellation) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellation(val *Cancellation) *NullableCancellation {
	return &NullableCancellation{value: val, isSet: true}
}

func (v NullableCancellation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


