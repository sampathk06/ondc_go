/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Subscriber Any entity which wants to authenticate itself on a network. This can be a Buyer App, Seller App or Gateway.
type Subscriber struct {
	// Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region
	SubscriberId *string `json:"subscriber_id,omitempty"`
	Type *string `json:"type,omitempty"`
	// Callback URL of the subscriber. The Registry will call this URL's on_subscribe API to validate the subscriber\\'s credentials
	CbUrl *string `json:"cb_url,omitempty"`
	Domain *Domain `json:"domain,omitempty"`
	City *Code `json:"city,omitempty"`
	Country *Code `json:"country,omitempty"`
	// Signing Public key of the subscriber. <br/><br/>Any subscriber platform (Buyer App, Seller App, Gateway) who wants to transact on the network must digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the transport layer header. In case of ```HTTP``` it is the ```Authorization``` header. <br><br/>The ```Authorization``` will be used to validate the signature of a Buyer App or Seller App.<br/><br/>Furthermore, if an API call is being proxied or multicast by a ONDC Gateway, the Gateway must use it\\'s signing key to digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the ```X-Gateway-Authorization``` header.
	SigningPublicKey *string `json:"signing_public_key,omitempty"`
	// Encryption public key of the Buyer App. Any Seller App must encrypt the ```requestBody.message``` value of the ```on_search``` API using this public key.
	EncryptionPublicKey *string `json:"encryption_public_key,omitempty"`
	Status *string `json:"status,omitempty"`
	// Timestamp when a subscriber was added to the registry with status = INITIATED
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	// Expiry timestamp in UTC derived from the ```lease_time``` of the subscriber
	Expires *time.Time `json:"expires,omitempty"`
}

// NewSubscriber instantiates a new Subscriber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriber() *Subscriber {
	this := Subscriber{}
	return &this
}

// NewSubscriberWithDefaults instantiates a new Subscriber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriberWithDefaults() *Subscriber {
	this := Subscriber{}
	return &this
}

// GetSubscriberId returns the SubscriberId field value if set, zero value otherwise.
func (o *Subscriber) GetSubscriberId() string {
	if o == nil || isNil(o.SubscriberId) {
		var ret string
		return ret
	}
	return *o.SubscriberId
}

// GetSubscriberIdOk returns a tuple with the SubscriberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSubscriberIdOk() (*string, bool) {
	if o == nil || isNil(o.SubscriberId) {
    return nil, false
	}
	return o.SubscriberId, true
}

// HasSubscriberId returns a boolean if a field has been set.
func (o *Subscriber) HasSubscriberId() bool {
	if o != nil && !isNil(o.SubscriberId) {
		return true
	}

	return false
}

// SetSubscriberId gets a reference to the given string and assigns it to the SubscriberId field.
func (o *Subscriber) SetSubscriberId(v string) {
	o.SubscriberId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Subscriber) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Subscriber) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Subscriber) SetType(v string) {
	o.Type = &v
}

// GetCbUrl returns the CbUrl field value if set, zero value otherwise.
func (o *Subscriber) GetCbUrl() string {
	if o == nil || isNil(o.CbUrl) {
		var ret string
		return ret
	}
	return *o.CbUrl
}

// GetCbUrlOk returns a tuple with the CbUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetCbUrlOk() (*string, bool) {
	if o == nil || isNil(o.CbUrl) {
    return nil, false
	}
	return o.CbUrl, true
}

// HasCbUrl returns a boolean if a field has been set.
func (o *Subscriber) HasCbUrl() bool {
	if o != nil && !isNil(o.CbUrl) {
		return true
	}

	return false
}

// SetCbUrl gets a reference to the given string and assigns it to the CbUrl field.
func (o *Subscriber) SetCbUrl(v string) {
	o.CbUrl = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Subscriber) GetDomain() Domain {
	if o == nil || isNil(o.Domain) {
		var ret Domain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetDomainOk() (*Domain, bool) {
	if o == nil || isNil(o.Domain) {
    return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Subscriber) HasDomain() bool {
	if o != nil && !isNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given Domain and assigns it to the Domain field.
func (o *Subscriber) SetDomain(v Domain) {
	o.Domain = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Subscriber) GetCity() Code {
	if o == nil || isNil(o.City) {
		var ret Code
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetCityOk() (*Code, bool) {
	if o == nil || isNil(o.City) {
    return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Subscriber) HasCity() bool {
	if o != nil && !isNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given Code and assigns it to the City field.
func (o *Subscriber) SetCity(v Code) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Subscriber) GetCountry() Code {
	if o == nil || isNil(o.Country) {
		var ret Code
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetCountryOk() (*Code, bool) {
	if o == nil || isNil(o.Country) {
    return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Subscriber) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given Code and assigns it to the Country field.
func (o *Subscriber) SetCountry(v Code) {
	o.Country = &v
}

// GetSigningPublicKey returns the SigningPublicKey field value if set, zero value otherwise.
func (o *Subscriber) GetSigningPublicKey() string {
	if o == nil || isNil(o.SigningPublicKey) {
		var ret string
		return ret
	}
	return *o.SigningPublicKey
}

// GetSigningPublicKeyOk returns a tuple with the SigningPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetSigningPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.SigningPublicKey) {
    return nil, false
	}
	return o.SigningPublicKey, true
}

// HasSigningPublicKey returns a boolean if a field has been set.
func (o *Subscriber) HasSigningPublicKey() bool {
	if o != nil && !isNil(o.SigningPublicKey) {
		return true
	}

	return false
}

// SetSigningPublicKey gets a reference to the given string and assigns it to the SigningPublicKey field.
func (o *Subscriber) SetSigningPublicKey(v string) {
	o.SigningPublicKey = &v
}

// GetEncryptionPublicKey returns the EncryptionPublicKey field value if set, zero value otherwise.
func (o *Subscriber) GetEncryptionPublicKey() string {
	if o == nil || isNil(o.EncryptionPublicKey) {
		var ret string
		return ret
	}
	return *o.EncryptionPublicKey
}

// GetEncryptionPublicKeyOk returns a tuple with the EncryptionPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetEncryptionPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionPublicKey) {
    return nil, false
	}
	return o.EncryptionPublicKey, true
}

// HasEncryptionPublicKey returns a boolean if a field has been set.
func (o *Subscriber) HasEncryptionPublicKey() bool {
	if o != nil && !isNil(o.EncryptionPublicKey) {
		return true
	}

	return false
}

// SetEncryptionPublicKey gets a reference to the given string and assigns it to the EncryptionPublicKey field.
func (o *Subscriber) SetEncryptionPublicKey(v string) {
	o.EncryptionPublicKey = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Subscriber) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Subscriber) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Subscriber) SetStatus(v string) {
	o.Status = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Subscriber) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Subscriber) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Subscriber) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Subscriber) GetUpdated() time.Time {
	if o == nil || isNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Updated) {
    return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Subscriber) HasUpdated() bool {
	if o != nil && !isNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Subscriber) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *Subscriber) GetExpires() time.Time {
	if o == nil || isNil(o.Expires) {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscriber) GetExpiresOk() (*time.Time, bool) {
	if o == nil || isNil(o.Expires) {
    return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *Subscriber) HasExpires() bool {
	if o != nil && !isNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *Subscriber) SetExpires(v time.Time) {
	o.Expires = &v
}

func (o Subscriber) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SubscriberId) {
		toSerialize["subscriber_id"] = o.SubscriberId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.CbUrl) {
		toSerialize["cb_url"] = o.CbUrl
	}
	if !isNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !isNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !isNil(o.SigningPublicKey) {
		toSerialize["signing_public_key"] = o.SigningPublicKey
	}
	if !isNil(o.EncryptionPublicKey) {
		toSerialize["encryption_public_key"] = o.EncryptionPublicKey
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !isNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriber struct {
	value *Subscriber
	isSet bool
}

func (v NullableSubscriber) Get() *Subscriber {
	return v.value
}

func (v *NullableSubscriber) Set(val *Subscriber) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriber) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriber(val *Subscriber) *NullableSubscriber {
	return &NullableSubscriber{value: val, isSet: true}
}

func (v NullableSubscriber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


