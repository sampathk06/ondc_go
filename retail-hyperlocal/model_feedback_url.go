/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FeedbackUrl Describes how a feedback URL will be sent by the Seller App
type FeedbackUrl struct {
	// feedback URL sent by the Seller App
	Url *string `json:"url,omitempty"`
	TlMethod *string `json:"tl_method,omitempty"`
	Params *FeedbackUrlParams `json:"params,omitempty"`
}

// NewFeedbackUrl instantiates a new FeedbackUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackUrl() *FeedbackUrl {
	this := FeedbackUrl{}
	return &this
}

// NewFeedbackUrlWithDefaults instantiates a new FeedbackUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackUrlWithDefaults() *FeedbackUrl {
	this := FeedbackUrl{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FeedbackUrl) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackUrl) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
    return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FeedbackUrl) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FeedbackUrl) SetUrl(v string) {
	o.Url = &v
}

// GetTlMethod returns the TlMethod field value if set, zero value otherwise.
func (o *FeedbackUrl) GetTlMethod() string {
	if o == nil || isNil(o.TlMethod) {
		var ret string
		return ret
	}
	return *o.TlMethod
}

// GetTlMethodOk returns a tuple with the TlMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackUrl) GetTlMethodOk() (*string, bool) {
	if o == nil || isNil(o.TlMethod) {
    return nil, false
	}
	return o.TlMethod, true
}

// HasTlMethod returns a boolean if a field has been set.
func (o *FeedbackUrl) HasTlMethod() bool {
	if o != nil && !isNil(o.TlMethod) {
		return true
	}

	return false
}

// SetTlMethod gets a reference to the given string and assigns it to the TlMethod field.
func (o *FeedbackUrl) SetTlMethod(v string) {
	o.TlMethod = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *FeedbackUrl) GetParams() FeedbackUrlParams {
	if o == nil || isNil(o.Params) {
		var ret FeedbackUrlParams
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackUrl) GetParamsOk() (*FeedbackUrlParams, bool) {
	if o == nil || isNil(o.Params) {
    return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *FeedbackUrl) HasParams() bool {
	if o != nil && !isNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given FeedbackUrlParams and assigns it to the Params field.
func (o *FeedbackUrl) SetParams(v FeedbackUrlParams) {
	o.Params = &v
}

func (o FeedbackUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.TlMethod) {
		toSerialize["tl_method"] = o.TlMethod
	}
	if !isNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return json.Marshal(toSerialize)
}

type NullableFeedbackUrl struct {
	value *FeedbackUrl
	isSet bool
}

func (v NullableFeedbackUrl) Get() *FeedbackUrl {
	return v.value
}

func (v *NullableFeedbackUrl) Set(val *FeedbackUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackUrl(val *FeedbackUrl) *NullableFeedbackUrl {
	return &NullableFeedbackUrl{value: val, isSet: true}
}

func (v NullableFeedbackUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


