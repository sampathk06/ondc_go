/*
ONDC Protocol API for retail (grocery, f&b)

ONDC Protocol API specification, which includes statutory requirements for packaged commodities and pre-packaged food This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Descriptor Describes the description of a real-world object.
type Descriptor struct {
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	ShortDesc *string `json:"short_desc,omitempty"`
	LongDesc *string `json:"long_desc,omitempty"`
	Images []string `json:"images,omitempty"`
	Audio *string `json:"audio,omitempty"`
	Var3dRender *string `json:"3d_render,omitempty"`
}

// NewDescriptor instantiates a new Descriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescriptor() *Descriptor {
	this := Descriptor{}
	return &this
}

// NewDescriptorWithDefaults instantiates a new Descriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptorWithDefaults() *Descriptor {
	this := Descriptor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Descriptor) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Descriptor) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Descriptor) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Descriptor) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Descriptor) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Descriptor) SetCode(v string) {
	o.Code = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Descriptor) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Descriptor) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Descriptor) SetSymbol(v string) {
	o.Symbol = &v
}

// GetShortDesc returns the ShortDesc field value if set, zero value otherwise.
func (o *Descriptor) GetShortDesc() string {
	if o == nil || isNil(o.ShortDesc) {
		var ret string
		return ret
	}
	return *o.ShortDesc
}

// GetShortDescOk returns a tuple with the ShortDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetShortDescOk() (*string, bool) {
	if o == nil || isNil(o.ShortDesc) {
    return nil, false
	}
	return o.ShortDesc, true
}

// HasShortDesc returns a boolean if a field has been set.
func (o *Descriptor) HasShortDesc() bool {
	if o != nil && !isNil(o.ShortDesc) {
		return true
	}

	return false
}

// SetShortDesc gets a reference to the given string and assigns it to the ShortDesc field.
func (o *Descriptor) SetShortDesc(v string) {
	o.ShortDesc = &v
}

// GetLongDesc returns the LongDesc field value if set, zero value otherwise.
func (o *Descriptor) GetLongDesc() string {
	if o == nil || isNil(o.LongDesc) {
		var ret string
		return ret
	}
	return *o.LongDesc
}

// GetLongDescOk returns a tuple with the LongDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetLongDescOk() (*string, bool) {
	if o == nil || isNil(o.LongDesc) {
    return nil, false
	}
	return o.LongDesc, true
}

// HasLongDesc returns a boolean if a field has been set.
func (o *Descriptor) HasLongDesc() bool {
	if o != nil && !isNil(o.LongDesc) {
		return true
	}

	return false
}

// SetLongDesc gets a reference to the given string and assigns it to the LongDesc field.
func (o *Descriptor) SetLongDesc(v string) {
	o.LongDesc = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *Descriptor) GetImages() []string {
	if o == nil || isNil(o.Images) {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetImagesOk() ([]string, bool) {
	if o == nil || isNil(o.Images) {
    return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *Descriptor) HasImages() bool {
	if o != nil && !isNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *Descriptor) SetImages(v []string) {
	o.Images = v
}

// GetAudio returns the Audio field value if set, zero value otherwise.
func (o *Descriptor) GetAudio() string {
	if o == nil || isNil(o.Audio) {
		var ret string
		return ret
	}
	return *o.Audio
}

// GetAudioOk returns a tuple with the Audio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetAudioOk() (*string, bool) {
	if o == nil || isNil(o.Audio) {
    return nil, false
	}
	return o.Audio, true
}

// HasAudio returns a boolean if a field has been set.
func (o *Descriptor) HasAudio() bool {
	if o != nil && !isNil(o.Audio) {
		return true
	}

	return false
}

// SetAudio gets a reference to the given string and assigns it to the Audio field.
func (o *Descriptor) SetAudio(v string) {
	o.Audio = &v
}

// GetVar3dRender returns the Var3dRender field value if set, zero value otherwise.
func (o *Descriptor) GetVar3dRender() string {
	if o == nil || isNil(o.Var3dRender) {
		var ret string
		return ret
	}
	return *o.Var3dRender
}

// GetVar3dRenderOk returns a tuple with the Var3dRender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Descriptor) GetVar3dRenderOk() (*string, bool) {
	if o == nil || isNil(o.Var3dRender) {
    return nil, false
	}
	return o.Var3dRender, true
}

// HasVar3dRender returns a boolean if a field has been set.
func (o *Descriptor) HasVar3dRender() bool {
	if o != nil && !isNil(o.Var3dRender) {
		return true
	}

	return false
}

// SetVar3dRender gets a reference to the given string and assigns it to the Var3dRender field.
func (o *Descriptor) SetVar3dRender(v string) {
	o.Var3dRender = &v
}

func (o Descriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.ShortDesc) {
		toSerialize["short_desc"] = o.ShortDesc
	}
	if !isNil(o.LongDesc) {
		toSerialize["long_desc"] = o.LongDesc
	}
	if !isNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !isNil(o.Audio) {
		toSerialize["audio"] = o.Audio
	}
	if !isNil(o.Var3dRender) {
		toSerialize["3d_render"] = o.Var3dRender
	}
	return json.Marshal(toSerialize)
}

type NullableDescriptor struct {
	value *Descriptor
	isSet bool
}

func (v NullableDescriptor) Get() *Descriptor {
	return v.value
}

func (v *NullableDescriptor) Set(val *Descriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescriptor(val *Descriptor) *NullableDescriptor {
	return &NullableDescriptor{value: val, isSet: true}
}

func (v NullableDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


