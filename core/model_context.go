/*
ONDC Protocol Core API

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Context Describes a ONDC message context
type Context struct {
	// Codification of domains supported by ONDC
	Domain string `json:"domain"`
	Country Code `json:"country"`
	City Code `json:"city"`
	// Defines the ONDC API call. Any actions other than the enumerated actions are not supported by ONDC Protocol
	Action string `json:"action"`
	// Version of ONDC core API specification being used
	CoreVersion string `json:"core_version"`
	// Unique id of the Buyer App. By default it is the fully qualified domain name of the Buyer App
	BapId string `json:"bap_id"`
	// URI of the Seller App for accepting callbacks. Must have the same domain name as the bap_id
	BapUri string `json:"bap_uri"`
	// Unique id of the Seller App. By default it is the fully qualified domain name of the Seller App
	BppId *string `json:"bpp_id,omitempty"`
	// URI of the Seller App. Must have the same domain name as the bap_id
	BppUri *string `json:"bpp_uri,omitempty"`
	// This is a unique value which persists across all API calls from search through confirm
	TransactionId string `json:"transaction_id"`
	// This is a unique value which persists during a request / callback cycle
	MessageId string `json:"message_id"`
	// Time of request generation in RFC3339 format
	Timestamp time.Time `json:"timestamp"`
	// The encryption public key of the sender
	Key *string `json:"key,omitempty"`
	// The duration in ISO8601 format after timestamp for which this message holds valid.
	Ttl *string `json:"ttl,omitempty"`
}

// NewContext instantiates a new Context object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContext(domain string, country Code, city Code, action string, coreVersion string, bapId string, bapUri string, transactionId string, messageId string, timestamp time.Time) *Context {
	this := Context{}
	this.Domain = domain
	this.Country = country
	this.City = city
	this.Action = action
	this.CoreVersion = coreVersion
	this.BapId = bapId
	this.BapUri = bapUri
	this.TransactionId = transactionId
	this.MessageId = messageId
	this.Timestamp = timestamp
	return &this
}

// NewContextWithDefaults instantiates a new Context object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextWithDefaults() *Context {
	this := Context{}
	return &this
}

// GetDomain returns the Domain field value
func (o *Context) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *Context) GetDomainOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *Context) SetDomain(v string) {
	o.Domain = v
}

// GetCountry returns the Country field value
func (o *Context) GetCountry() Code {
	if o == nil {
		var ret Code
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Context) GetCountryOk() (*Code, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Context) SetCountry(v Code) {
	o.Country = v
}

// GetCity returns the City field value
func (o *Context) GetCity() Code {
	if o == nil {
		var ret Code
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *Context) GetCityOk() (*Code, bool) {
	if o == nil {
    return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *Context) SetCity(v Code) {
	o.City = v
}

// GetAction returns the Action field value
func (o *Context) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *Context) GetActionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *Context) SetAction(v string) {
	o.Action = v
}

// GetCoreVersion returns the CoreVersion field value
func (o *Context) GetCoreVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CoreVersion
}

// GetCoreVersionOk returns a tuple with the CoreVersion field value
// and a boolean to check if the value has been set.
func (o *Context) GetCoreVersionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CoreVersion, true
}

// SetCoreVersion sets field value
func (o *Context) SetCoreVersion(v string) {
	o.CoreVersion = v
}

// GetBapId returns the BapId field value
func (o *Context) GetBapId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BapId
}

// GetBapIdOk returns a tuple with the BapId field value
// and a boolean to check if the value has been set.
func (o *Context) GetBapIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BapId, true
}

// SetBapId sets field value
func (o *Context) SetBapId(v string) {
	o.BapId = v
}

// GetBapUri returns the BapUri field value
func (o *Context) GetBapUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BapUri
}

// GetBapUriOk returns a tuple with the BapUri field value
// and a boolean to check if the value has been set.
func (o *Context) GetBapUriOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BapUri, true
}

// SetBapUri sets field value
func (o *Context) SetBapUri(v string) {
	o.BapUri = v
}

// GetBppId returns the BppId field value if set, zero value otherwise.
func (o *Context) GetBppId() string {
	if o == nil || isNil(o.BppId) {
		var ret string
		return ret
	}
	return *o.BppId
}

// GetBppIdOk returns a tuple with the BppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetBppIdOk() (*string, bool) {
	if o == nil || isNil(o.BppId) {
    return nil, false
	}
	return o.BppId, true
}

// HasBppId returns a boolean if a field has been set.
func (o *Context) HasBppId() bool {
	if o != nil && !isNil(o.BppId) {
		return true
	}

	return false
}

// SetBppId gets a reference to the given string and assigns it to the BppId field.
func (o *Context) SetBppId(v string) {
	o.BppId = &v
}

// GetBppUri returns the BppUri field value if set, zero value otherwise.
func (o *Context) GetBppUri() string {
	if o == nil || isNil(o.BppUri) {
		var ret string
		return ret
	}
	return *o.BppUri
}

// GetBppUriOk returns a tuple with the BppUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetBppUriOk() (*string, bool) {
	if o == nil || isNil(o.BppUri) {
    return nil, false
	}
	return o.BppUri, true
}

// HasBppUri returns a boolean if a field has been set.
func (o *Context) HasBppUri() bool {
	if o != nil && !isNil(o.BppUri) {
		return true
	}

	return false
}

// SetBppUri gets a reference to the given string and assigns it to the BppUri field.
func (o *Context) SetBppUri(v string) {
	o.BppUri = &v
}

// GetTransactionId returns the TransactionId field value
func (o *Context) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *Context) GetTransactionIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *Context) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetMessageId returns the MessageId field value
func (o *Context) GetMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *Context) GetMessageIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *Context) SetMessageId(v string) {
	o.MessageId = v
}

// GetTimestamp returns the Timestamp field value
func (o *Context) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Context) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Context) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Context) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
    return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Context) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Context) SetKey(v string) {
	o.Key = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Context) GetTtl() string {
	if o == nil || isNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Context) GetTtlOk() (*string, bool) {
	if o == nil || isNil(o.Ttl) {
    return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Context) HasTtl() bool {
	if o != nil && !isNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *Context) SetTtl(v string) {
	o.Ttl = &v
}

func (o Context) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["city"] = o.City
	}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["core_version"] = o.CoreVersion
	}
	if true {
		toSerialize["bap_id"] = o.BapId
	}
	if true {
		toSerialize["bap_uri"] = o.BapUri
	}
	if !isNil(o.BppId) {
		toSerialize["bpp_id"] = o.BppId
	}
	if !isNil(o.BppUri) {
		toSerialize["bpp_uri"] = o.BppUri
	}
	if true {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if true {
		toSerialize["message_id"] = o.MessageId
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableContext struct {
	value *Context
	isSet bool
}

func (v NullableContext) Get() *Context {
	return v.value
}

func (v *NullableContext) Set(val *Context) {
	v.value = val
	v.isSet = true
}

func (v NullableContext) IsSet() bool {
	return v.isSet
}

func (v *NullableContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContext(val *Context) *NullableContext {
	return &NullableContext{value: val, isSet: true}
}

func (v NullableContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


