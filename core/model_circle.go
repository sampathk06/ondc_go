/*
ONDC Protocol Core API

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Circle Describes a circular area on the map
type Circle struct {
	// Describes a gps coordinate
	Gps string `json:"gps"`
	Radius Scalar `json:"radius"`
}

// NewCircle instantiates a new Circle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCircle(gps string, radius Scalar) *Circle {
	this := Circle{}
	this.Gps = gps
	this.Radius = radius
	return &this
}

// NewCircleWithDefaults instantiates a new Circle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCircleWithDefaults() *Circle {
	this := Circle{}
	return &this
}

// GetGps returns the Gps field value
func (o *Circle) GetGps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gps
}

// GetGpsOk returns a tuple with the Gps field value
// and a boolean to check if the value has been set.
func (o *Circle) GetGpsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Gps, true
}

// SetGps sets field value
func (o *Circle) SetGps(v string) {
	o.Gps = v
}

// GetRadius returns the Radius field value
func (o *Circle) GetRadius() Scalar {
	if o == nil {
		var ret Scalar
		return ret
	}

	return o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value
// and a boolean to check if the value has been set.
func (o *Circle) GetRadiusOk() (*Scalar, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Radius, true
}

// SetRadius sets field value
func (o *Circle) SetRadius(v Scalar) {
	o.Radius = v
}

func (o Circle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gps"] = o.Gps
	}
	if true {
		toSerialize["radius"] = o.Radius
	}
	return json.Marshal(toSerialize)
}

type NullableCircle struct {
	value *Circle
	isSet bool
}

func (v NullableCircle) Get() *Circle {
	return v.value
}

func (v *NullableCircle) Set(val *Circle) {
	v.value = val
	v.isSet = true
}

func (v NullableCircle) IsSet() bool {
	return v.isSet
}

func (v *NullableCircle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircle(val *Circle) *NullableCircle {
	return &NullableCircle{value: val, isSet: true}
}

func (v NullableCircle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


