/*
ONDC Protocol Core API

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Ack Describes the ACK response
type Ack struct {
	// Describe the status of the ACK response. If schema validation passes, status is ACK else it is NACK
	Status string `json:"status"`
}

// NewAck instantiates a new Ack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAck(status string) *Ack {
	this := Ack{}
	this.Status = status
	return &this
}

// NewAckWithDefaults instantiates a new Ack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAckWithDefaults() *Ack {
	this := Ack{}
	return &this
}

// GetStatus returns the Status field value
func (o *Ack) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Ack) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Ack) SetStatus(v string) {
	o.Status = v
}

func (o Ack) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableAck struct {
	value *Ack
	isSet bool
}

func (v NullableAck) Get() *Ack {
	return v.value
}

func (v *NullableAck) Set(val *Ack) {
	v.value = val
	v.isSet = true
}

func (v NullableAck) IsSet() bool {
	return v.isSet
}

func (v *NullableAck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAck(val *Ack) *NullableAck {
	return &NullableAck{value: val, isSet: true}
}

func (v NullableAck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


