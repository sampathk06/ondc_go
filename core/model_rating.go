/*
ONDC Protocol Core API

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Rating Describes the rating of a person or an object.
type Rating struct {
	// Category of the object being rated
	RatingCategory *string `json:"rating_category,omitempty"`
	// Id of the object being rated
	Id *string `json:"id,omitempty"`
	// Rating value given to the object
	Value *float32 `json:"value,omitempty"`
	// Describes a feedback form that a Seller App can send to get feedback from the Buyer App
	FeedbackForm []FeedbackFormElement `json:"feedback_form,omitempty"`
	FeedbackId *FeedbackId `json:"feedback_id,omitempty"`
}

// NewRating instantiates a new Rating object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRating() *Rating {
	this := Rating{}
	return &this
}

// NewRatingWithDefaults instantiates a new Rating object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingWithDefaults() *Rating {
	this := Rating{}
	return &this
}

// GetRatingCategory returns the RatingCategory field value if set, zero value otherwise.
func (o *Rating) GetRatingCategory() string {
	if o == nil || isNil(o.RatingCategory) {
		var ret string
		return ret
	}
	return *o.RatingCategory
}

// GetRatingCategoryOk returns a tuple with the RatingCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetRatingCategoryOk() (*string, bool) {
	if o == nil || isNil(o.RatingCategory) {
    return nil, false
	}
	return o.RatingCategory, true
}

// HasRatingCategory returns a boolean if a field has been set.
func (o *Rating) HasRatingCategory() bool {
	if o != nil && !isNil(o.RatingCategory) {
		return true
	}

	return false
}

// SetRatingCategory gets a reference to the given string and assigns it to the RatingCategory field.
func (o *Rating) SetRatingCategory(v string) {
	o.RatingCategory = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rating) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rating) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Rating) SetId(v string) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Rating) GetValue() float32 {
	if o == nil || isNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetValueOk() (*float32, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Rating) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *Rating) SetValue(v float32) {
	o.Value = &v
}

// GetFeedbackForm returns the FeedbackForm field value if set, zero value otherwise.
func (o *Rating) GetFeedbackForm() []FeedbackFormElement {
	if o == nil || isNil(o.FeedbackForm) {
		var ret []FeedbackFormElement
		return ret
	}
	return o.FeedbackForm
}

// GetFeedbackFormOk returns a tuple with the FeedbackForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetFeedbackFormOk() ([]FeedbackFormElement, bool) {
	if o == nil || isNil(o.FeedbackForm) {
    return nil, false
	}
	return o.FeedbackForm, true
}

// HasFeedbackForm returns a boolean if a field has been set.
func (o *Rating) HasFeedbackForm() bool {
	if o != nil && !isNil(o.FeedbackForm) {
		return true
	}

	return false
}

// SetFeedbackForm gets a reference to the given []FeedbackFormElement and assigns it to the FeedbackForm field.
func (o *Rating) SetFeedbackForm(v []FeedbackFormElement) {
	o.FeedbackForm = v
}

// GetFeedbackId returns the FeedbackId field value if set, zero value otherwise.
func (o *Rating) GetFeedbackId() FeedbackId {
	if o == nil || isNil(o.FeedbackId) {
		var ret FeedbackId
		return ret
	}
	return *o.FeedbackId
}

// GetFeedbackIdOk returns a tuple with the FeedbackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetFeedbackIdOk() (*FeedbackId, bool) {
	if o == nil || isNil(o.FeedbackId) {
    return nil, false
	}
	return o.FeedbackId, true
}

// HasFeedbackId returns a boolean if a field has been set.
func (o *Rating) HasFeedbackId() bool {
	if o != nil && !isNil(o.FeedbackId) {
		return true
	}

	return false
}

// SetFeedbackId gets a reference to the given FeedbackId and assigns it to the FeedbackId field.
func (o *Rating) SetFeedbackId(v FeedbackId) {
	o.FeedbackId = &v
}

func (o Rating) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RatingCategory) {
		toSerialize["rating_category"] = o.RatingCategory
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.FeedbackForm) {
		toSerialize["feedback_form"] = o.FeedbackForm
	}
	if !isNil(o.FeedbackId) {
		toSerialize["feedback_id"] = o.FeedbackId
	}
	return json.Marshal(toSerialize)
}

type NullableRating struct {
	value *Rating
	isSet bool
}

func (v NullableRating) Get() *Rating {
	return v.value
}

func (v *NullableRating) Set(val *Rating) {
	v.value = val
	v.isSet = true
}

func (v NullableRating) IsSet() bool {
	return v.isSet
}

func (v *NullableRating) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRating(val *Rating) *NullableRating {
	return &NullableRating{value: val, isSet: true}
}

func (v NullableRating) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRating) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


