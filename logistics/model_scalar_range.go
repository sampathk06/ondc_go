/*
ONDC Protocol API for logistics

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScalarRange struct for ScalarRange
type ScalarRange struct {
	Min *float32 `json:"min,omitempty"`
	Max *float32 `json:"max,omitempty"`
}

// NewScalarRange instantiates a new ScalarRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScalarRange() *ScalarRange {
	this := ScalarRange{}
	return &this
}

// NewScalarRangeWithDefaults instantiates a new ScalarRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScalarRangeWithDefaults() *ScalarRange {
	this := ScalarRange{}
	return &this
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *ScalarRange) GetMin() float32 {
	if o == nil || isNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalarRange) GetMinOk() (*float32, bool) {
	if o == nil || isNil(o.Min) {
    return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *ScalarRange) HasMin() bool {
	if o != nil && !isNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *ScalarRange) SetMin(v float32) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *ScalarRange) GetMax() float32 {
	if o == nil || isNil(o.Max) {
		var ret float32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalarRange) GetMaxOk() (*float32, bool) {
	if o == nil || isNil(o.Max) {
    return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *ScalarRange) HasMax() bool {
	if o != nil && !isNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float32 and assigns it to the Max field.
func (o *ScalarRange) SetMax(v float32) {
	o.Max = &v
}

func (o ScalarRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !isNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	return json.Marshal(toSerialize)
}

type NullableScalarRange struct {
	value *ScalarRange
	isSet bool
}

func (v NullableScalarRange) Get() *ScalarRange {
	return v.value
}

func (v *NullableScalarRange) Set(val *ScalarRange) {
	v.value = val
	v.isSet = true
}

func (v NullableScalarRange) IsSet() bool {
	return v.isSet
}

func (v *NullableScalarRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScalarRange(val *ScalarRange) *NullableScalarRange {
	return &NullableScalarRange{value: val, isSet: true}
}

func (v NullableScalarRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScalarRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


