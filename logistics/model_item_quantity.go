/*
ONDC Protocol API for logistics

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ItemQuantity Describes count or amount of an item
type ItemQuantity struct {
	Allocated *ItemQuantityAllocated `json:"allocated,omitempty"`
	Available *ItemQuantityAllocated `json:"available,omitempty"`
	Maximum *ItemQuantityMaximum `json:"maximum,omitempty"`
	Minimum *ItemQuantityAllocated `json:"minimum,omitempty"`
	Selected *ItemQuantityAllocated `json:"selected,omitempty"`
}

// NewItemQuantity instantiates a new ItemQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemQuantity() *ItemQuantity {
	this := ItemQuantity{}
	return &this
}

// NewItemQuantityWithDefaults instantiates a new ItemQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemQuantityWithDefaults() *ItemQuantity {
	this := ItemQuantity{}
	return &this
}

// GetAllocated returns the Allocated field value if set, zero value otherwise.
func (o *ItemQuantity) GetAllocated() ItemQuantityAllocated {
	if o == nil || isNil(o.Allocated) {
		var ret ItemQuantityAllocated
		return ret
	}
	return *o.Allocated
}

// GetAllocatedOk returns a tuple with the Allocated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetAllocatedOk() (*ItemQuantityAllocated, bool) {
	if o == nil || isNil(o.Allocated) {
    return nil, false
	}
	return o.Allocated, true
}

// HasAllocated returns a boolean if a field has been set.
func (o *ItemQuantity) HasAllocated() bool {
	if o != nil && !isNil(o.Allocated) {
		return true
	}

	return false
}

// SetAllocated gets a reference to the given ItemQuantityAllocated and assigns it to the Allocated field.
func (o *ItemQuantity) SetAllocated(v ItemQuantityAllocated) {
	o.Allocated = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *ItemQuantity) GetAvailable() ItemQuantityAllocated {
	if o == nil || isNil(o.Available) {
		var ret ItemQuantityAllocated
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetAvailableOk() (*ItemQuantityAllocated, bool) {
	if o == nil || isNil(o.Available) {
    return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *ItemQuantity) HasAvailable() bool {
	if o != nil && !isNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given ItemQuantityAllocated and assigns it to the Available field.
func (o *ItemQuantity) SetAvailable(v ItemQuantityAllocated) {
	o.Available = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *ItemQuantity) GetMaximum() ItemQuantityMaximum {
	if o == nil || isNil(o.Maximum) {
		var ret ItemQuantityMaximum
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetMaximumOk() (*ItemQuantityMaximum, bool) {
	if o == nil || isNil(o.Maximum) {
    return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *ItemQuantity) HasMaximum() bool {
	if o != nil && !isNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given ItemQuantityMaximum and assigns it to the Maximum field.
func (o *ItemQuantity) SetMaximum(v ItemQuantityMaximum) {
	o.Maximum = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *ItemQuantity) GetMinimum() ItemQuantityAllocated {
	if o == nil || isNil(o.Minimum) {
		var ret ItemQuantityAllocated
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetMinimumOk() (*ItemQuantityAllocated, bool) {
	if o == nil || isNil(o.Minimum) {
    return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *ItemQuantity) HasMinimum() bool {
	if o != nil && !isNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given ItemQuantityAllocated and assigns it to the Minimum field.
func (o *ItemQuantity) SetMinimum(v ItemQuantityAllocated) {
	o.Minimum = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *ItemQuantity) GetSelected() ItemQuantityAllocated {
	if o == nil || isNil(o.Selected) {
		var ret ItemQuantityAllocated
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantity) GetSelectedOk() (*ItemQuantityAllocated, bool) {
	if o == nil || isNil(o.Selected) {
    return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *ItemQuantity) HasSelected() bool {
	if o != nil && !isNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given ItemQuantityAllocated and assigns it to the Selected field.
func (o *ItemQuantity) SetSelected(v ItemQuantityAllocated) {
	o.Selected = &v
}

func (o ItemQuantity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Allocated) {
		toSerialize["allocated"] = o.Allocated
	}
	if !isNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !isNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !isNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !isNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	return json.Marshal(toSerialize)
}

type NullableItemQuantity struct {
	value *ItemQuantity
	isSet bool
}

func (v NullableItemQuantity) Get() *ItemQuantity {
	return v.value
}

func (v *NullableItemQuantity) Set(val *ItemQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableItemQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableItemQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemQuantity(val *ItemQuantity) *NullableItemQuantity {
	return &NullableItemQuantity{value: val, isSet: true}
}

func (v NullableItemQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


