/*
ONDC Protocol API for logistics

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddOn Describes an add-on
type AddOn struct {
	// ID of the add-on. This follows the syntax {item.id}/add-on/{add-on unique id} for item specific add-on OR 
	Id *string `json:"id,omitempty"`
	Descriptor *Descriptor `json:"descriptor,omitempty"`
	Price *Price `json:"price,omitempty"`
}

// NewAddOn instantiates a new AddOn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOn() *AddOn {
	this := AddOn{}
	return &this
}

// NewAddOnWithDefaults instantiates a new AddOn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOnWithDefaults() *AddOn {
	this := AddOn{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddOn) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOn) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddOn) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddOn) SetId(v string) {
	o.Id = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *AddOn) GetDescriptor() Descriptor {
	if o == nil || isNil(o.Descriptor) {
		var ret Descriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOn) GetDescriptorOk() (*Descriptor, bool) {
	if o == nil || isNil(o.Descriptor) {
    return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *AddOn) HasDescriptor() bool {
	if o != nil && !isNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given Descriptor and assigns it to the Descriptor field.
func (o *AddOn) SetDescriptor(v Descriptor) {
	o.Descriptor = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AddOn) GetPrice() Price {
	if o == nil || isNil(o.Price) {
		var ret Price
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOn) GetPriceOk() (*Price, bool) {
	if o == nil || isNil(o.Price) {
    return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *AddOn) HasPrice() bool {
	if o != nil && !isNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given Price and assigns it to the Price field.
func (o *AddOn) SetPrice(v Price) {
	o.Price = &v
}

func (o AddOn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !isNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableAddOn struct {
	value *AddOn
	isSet bool
}

func (v NullableAddOn) Get() *AddOn {
	return v.value
}

func (v *NullableAddOn) Set(val *AddOn) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOn) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOn(val *AddOn) *NullableAddOn {
	return &NullableAddOn{value: val, isSet: true}
}

func (v NullableAddOn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


