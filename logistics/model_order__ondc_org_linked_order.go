/*
ONDC Protocol API for logistics

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrderOndcOrgLinkedOrder payload for linked order e.g. retail order that cascaded into this logistics order
type OrderOndcOrgLinkedOrder struct {
	Items []OrderOndcOrgLinkedOrderItemsInner `json:"items,omitempty"`
	Provider *OrderOndcOrgLinkedOrderProvider `json:"provider,omitempty"`
	Order *OrderOndcOrgLinkedOrderOrder `json:"order,omitempty"`
}

// NewOrderOndcOrgLinkedOrder instantiates a new OrderOndcOrgLinkedOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderOndcOrgLinkedOrder() *OrderOndcOrgLinkedOrder {
	this := OrderOndcOrgLinkedOrder{}
	return &this
}

// NewOrderOndcOrgLinkedOrderWithDefaults instantiates a new OrderOndcOrgLinkedOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderOndcOrgLinkedOrderWithDefaults() *OrderOndcOrgLinkedOrder {
	this := OrderOndcOrgLinkedOrder{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *OrderOndcOrgLinkedOrder) GetItems() []OrderOndcOrgLinkedOrderItemsInner {
	if o == nil || isNil(o.Items) {
		var ret []OrderOndcOrgLinkedOrderItemsInner
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOndcOrgLinkedOrder) GetItemsOk() ([]OrderOndcOrgLinkedOrderItemsInner, bool) {
	if o == nil || isNil(o.Items) {
    return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *OrderOndcOrgLinkedOrder) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []OrderOndcOrgLinkedOrderItemsInner and assigns it to the Items field.
func (o *OrderOndcOrgLinkedOrder) SetItems(v []OrderOndcOrgLinkedOrderItemsInner) {
	o.Items = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *OrderOndcOrgLinkedOrder) GetProvider() OrderOndcOrgLinkedOrderProvider {
	if o == nil || isNil(o.Provider) {
		var ret OrderOndcOrgLinkedOrderProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOndcOrgLinkedOrder) GetProviderOk() (*OrderOndcOrgLinkedOrderProvider, bool) {
	if o == nil || isNil(o.Provider) {
    return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *OrderOndcOrgLinkedOrder) HasProvider() bool {
	if o != nil && !isNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given OrderOndcOrgLinkedOrderProvider and assigns it to the Provider field.
func (o *OrderOndcOrgLinkedOrder) SetProvider(v OrderOndcOrgLinkedOrderProvider) {
	o.Provider = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *OrderOndcOrgLinkedOrder) GetOrder() OrderOndcOrgLinkedOrderOrder {
	if o == nil || isNil(o.Order) {
		var ret OrderOndcOrgLinkedOrderOrder
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderOndcOrgLinkedOrder) GetOrderOk() (*OrderOndcOrgLinkedOrderOrder, bool) {
	if o == nil || isNil(o.Order) {
    return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *OrderOndcOrgLinkedOrder) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given OrderOndcOrgLinkedOrderOrder and assigns it to the Order field.
func (o *OrderOndcOrgLinkedOrder) SetOrder(v OrderOndcOrgLinkedOrderOrder) {
	o.Order = &v
}

func (o OrderOndcOrgLinkedOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !isNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return json.Marshal(toSerialize)
}

type NullableOrderOndcOrgLinkedOrder struct {
	value *OrderOndcOrgLinkedOrder
	isSet bool
}

func (v NullableOrderOndcOrgLinkedOrder) Get() *OrderOndcOrgLinkedOrder {
	return v.value
}

func (v *NullableOrderOndcOrgLinkedOrder) Set(val *OrderOndcOrgLinkedOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderOndcOrgLinkedOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderOndcOrgLinkedOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderOndcOrgLinkedOrder(val *OrderOndcOrgLinkedOrder) *NullableOrderOndcOrgLinkedOrder {
	return &NullableOrderOndcOrgLinkedOrder{value: val, isSet: true}
}

func (v NullableOrderOndcOrgLinkedOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderOndcOrgLinkedOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


