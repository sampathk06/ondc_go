/*
ONDC Protocol API for logistics

ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3

API version: 1.0.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OnSearchPostRequest struct for OnSearchPostRequest
type OnSearchPostRequest struct {
	Context Context `json:"context"`
	Message *OnSearchPostRequestMessage `json:"message,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewOnSearchPostRequest instantiates a new OnSearchPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnSearchPostRequest(context Context) *OnSearchPostRequest {
	this := OnSearchPostRequest{}
	this.Context = context
	return &this
}

// NewOnSearchPostRequestWithDefaults instantiates a new OnSearchPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnSearchPostRequestWithDefaults() *OnSearchPostRequest {
	this := OnSearchPostRequest{}
	return &this
}

// GetContext returns the Context field value
func (o *OnSearchPostRequest) GetContext() Context {
	if o == nil {
		var ret Context
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *OnSearchPostRequest) GetContextOk() (*Context, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *OnSearchPostRequest) SetContext(v Context) {
	o.Context = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *OnSearchPostRequest) GetMessage() OnSearchPostRequestMessage {
	if o == nil || isNil(o.Message) {
		var ret OnSearchPostRequestMessage
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnSearchPostRequest) GetMessageOk() (*OnSearchPostRequestMessage, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *OnSearchPostRequest) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given OnSearchPostRequestMessage and assigns it to the Message field.
func (o *OnSearchPostRequest) SetMessage(v OnSearchPostRequestMessage) {
	o.Message = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *OnSearchPostRequest) GetError() Error {
	if o == nil || isNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnSearchPostRequest) GetErrorOk() (*Error, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *OnSearchPostRequest) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *OnSearchPostRequest) SetError(v Error) {
	o.Error = &v
}

func (o OnSearchPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["context"] = o.Context
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableOnSearchPostRequest struct {
	value *OnSearchPostRequest
	isSet bool
}

func (v NullableOnSearchPostRequest) Get() *OnSearchPostRequest {
	return v.value
}

func (v *NullableOnSearchPostRequest) Set(val *OnSearchPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOnSearchPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOnSearchPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnSearchPostRequest(val *OnSearchPostRequest) *NullableOnSearchPostRequest {
	return &NullableOnSearchPostRequest{value: val, isSet: true}
}

func (v NullableOnSearchPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnSearchPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


